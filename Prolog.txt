WAP to calculate the factorial of a number by using
Prolog.

Factorial.pl
fact(0,1).
fact(A,B):-A>0,C is A-1,fact(C,D),B is A*D.


WAP to solve Box Solver problem

BoxSolver.pl
box(1,3,black).
box(2,1,black).
box(3,1,white).
box(4,2,black).
box(5,3,white).
getbox(1).
getbox(2).
getbox(3).
getbox(4).
getbox(5).
owners(A,B,C,D,E):-
getbox(A),getbox(B),getbox(C),getbox(D),getbox(E),A\=B,A\=C,A\=D,A\=E,B\=C,B\=D,B\
=E,C\=D,C\=E,D\=E,box(A,_,ColorA),box(B,_,ColorA),box(D,_,ColorD),box(E,_,ColorD),b
ox(C,SizeC,_),box(D,SizeC,_),box(E,SizeE,_),box(B,SizeB,_),SizeE<SizeB.




WAP to find the length of the list using Prolog

lengthList([], 0).
lengthList([_|TAIL],N) :- lengthList(TAIL,N1), N is N1 + 1.




WAP to implement AND logic Gate using
perceptron neural network.


import numpy as np
def unitStep(v):
if v >= 0:
return 1
else:
return 0
def perceptronModel(x, w, b):
v = np.dot(w, x) + b
y = unitStep(v)
return y
def AND_logicFunction(x):
w = np.array([1, 1])
b = -1.5
return perceptronModel(x, w, b)
test1 = np.array([0, 1])
test2 = np.array([1, 1])
test3 = np.array([0, 0])
test4 = np.array([1, 0])
print("AND({}, {}) = {}".format(0, 1, AND_logicFunction(test1)))
print("AND({}, {}) = {}".format(1, 1, AND_logicFunction(test2)))
print("AND({}, {}) = {}".format(0, 0, AND_logicFunction(test3)))
print("AND({}, {}) = {}".format(1, 0, AND_logicFunction(test4)))